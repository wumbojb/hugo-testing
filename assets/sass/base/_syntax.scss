@use "../abstracts/variables" as v;
@use "../abstracts/mixins" as m;

// SYNTAX HIGLIGHT
pre,
code,
kbd {
  font-family: v.$font-mono;
}

code:not(pre code) {
  font-size: v.$fs-sm;
  background-color: var(--second-bg);
  padding-inline: 0.25rem;
  border-radius: 0.25rem;
  border: 1px solid var(--base-border);
}

.highlight {
  position: relative;
  direction: ltr;
  text-align: left;
  unicode-bidi: plaintext;

  &::before,
  & code::before {
    font-family: v.$font-mono;
    font-size: v.$fs-sm;

    border: 1px solid var(--base-border);
    margin-block-end: -1px;
    color: var(--third-color);
    background-color: var(--second-bg);
    padding: 0.1rem 0.75rem;
    position: absolute;
    inset-block-end: 100%;
    width: 100%;
  }

  pre {
    @include m.custom-scrollbar(var(--base-border), var(--primary));
    padding: 1rem;
    margin-block: 3rem;
    background-color: var(--second-bg);
    border: 1px solid var(--base-border);
    box-shadow: var(--color-shadow-default);
    overflow-x: scroll;
  }

  code {
    &::before {
      content: attr(data-lang);
      text-transform: capitalize;
      position: absolute;
      inset-block-end: 100%;
      inset-inline-start: 0;
    }

    &::after {
      position: absolute;
      inset-block-end: 100%;
      inset-inline-end: 0;
      font-size: 0.75rem;
      color: var(--second-color);
      padding: 0.3rem 0.5rem;
      cursor:grab;
    }
  }
}

.bg {
  color: var(--fg);
  background-color: var(--bg);
}

.chroma {
  color: var(--fg);
  background-color: var(--bg);

  .lnlinks {
    outline: none;
    text-decoration: none;
    color: inherit;
  }
  :is(.lntd, .lntable) {
    padding: 0;
    margin: 0;
    border: 0;
    vertical-align: top;
    border-spacing: 0;
  }

  :is(.lnt, .ln) {
    white-space: pre;
    -webkit-user-select: none;
    user-select: none;
    margin-right: 0.4em;
    padding: 0 0.4em 0 0.4em;
  }

  .err {
    color: var(--err);
    background-color: var(--err-fg, transparent);
  }
  .hl {
    background-color: var(--hl);
  }

  :is(.lnt, .ln) {
    color: var(--lnt);
  }
  :is(.k, .kd, .kn, .kr, .kt) {
    color: var(--k);
  }
  .kc {
    color: var(--kc);
  }
  .nc {
    color: var(--nc);
    font-weight: bold;
  }
  .no {
    color: var(--no);
    font-weight: bold;
  }
  .nd {
    color: var(--nd);
    font-weight: bold;
  }
  .ni {
    color: var(--ni);
  }
  .ne {
    color: var(--ne);
    font-weight: bold;
  }
  .nl {
    color: var(--nl);
    font-weight: bold;
  }
  .nn {
    color: var(--nn);
  }
  .nx {
    color: var(--nx, inherit);
  }
  .py {
    color: var(--py, inherit);
  }
  .nt {
    color: var(--nt);
  }
  .nb {
    color: var(--nb, inherit);
  }
  .bp {
    color: var(--bp, inherit);
  }
  :is(.nv, .vc, .vg, .vi, .vm) {
    color: var(--nv, inherit);
  }
  :is(.nf, .fm) {
    color: var(--nf);
    font-weight: bold;
  }
  :is(
    .l,
    .s,
    .sb,
    .sc,
    .sd,
    .s2,
    .si,
    .sx,
    .s1,
    .ss,
    .m,
    .mb,
    .mf,
    .mh,
    .mi,
    .il,
    .mo
  ) {
    color: var(--l);
  }

  :is(.sa, .se, .sh, .sr, .dl) {
    color: var(--sa);
  }

  :is(.o, .ow) {
    color: var(--o);
    font-weight: bold;
  }
  .p {
    color: var(--fg);
  }
  :is(.c, .ch, .cm, .c1, .cs, .cp, .cpf) {
    color: var(--c);
    font-style: italic;
  }
  :is(.cs, .cp, .cpf) {
    font-weight: bold;
  }
  .gd {
    color: var(--gd);
    background-color: var(--gd-bg, transparent);
  }
  .gi {
    color: var(--gi);
    background-color: var(--gi-bg, transparent);
  }
  :is(.go, .gp) {
    color: var(--go);
  }
  .w {
    color: var(--w);
  }
  .gl {
    text-decoration: underline;
  }
  .line {
    display: flex;
  }
  .gs {
    font-weight: bold;
  }
  .ge {
    font-style: italic;
  }
  :where(.gh, .gu) {
    color: var(--kc, inherit);
    font-weight: bold;
  }
}
